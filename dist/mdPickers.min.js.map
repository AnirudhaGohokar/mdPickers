{"version":3,"sources":["mdPickers.min.js"],"names":["configIcons","$mdIconProvider","mdpIconsRegistry","angular","forEach","icon","index","id","url","runBlock","$templateCache","put","svg","$inject","module","config","run","constant","ngMessage","$mdUtil","restrict","priority","compile","element","inputContainer","getClosest","toggleClass","directive","ClockCtrl","$scope","getPointerStyle","divider","vm","type","TYPE_HOURS","TYPE_MINUTES","degrees","Math","round","selected","-webkit-transform","-ms-transform","transform","setTimeByDeg","deg","setTime","time","format","hours","minutes","init","i","steps","push","this","STEP_DEG","CLOCK_TYPES","range","controller","TimePickerCtrl","$mdDialog","options","$mdMedia","switchView","currentView","VIEW_HOURS","VIEW_MINUTES","setAM","hour","setPM","cancel","confirm","hide","toDate","moment","labels","autoSwitch","clockHours","parseInt","clockMinutes","mdpClock","$animate","$timeout","$$rAF","linkFn","scope","attrs","ctrl","timepickerCtrl","querySelector","$parent","timepicker","onEvent","event","containerCoords","currentTarget","getClientRects","x","offsetWidth","pageX","left","y","pageY","top","offsetHeight","atan2","PI","indexOf","on","e","off","$on","bindToController","replace","templateUrl","controllerAs","link","mdpTimePicker","$mdpTimePicker","ngModel","$transclude","showPicker","ev","$modelValue","targetEvent","then","$setViewValue","$render","require","timeFormat","updateInputElement","value","$valid","inputElement","size","length","inputContainerCtrl","setHasValue","$isEmpty","updateTime","isDate","strValue","isValid","$pristine","messages","hasClass","removeClass","onInputElementEvents","target","$viewVaue","clone","append","$watch","$error","newValue","oldValue","setInvalid","Object","keys","$formatters","unshift","$validators","modelValue","viewValue","$parsers","parsed","originalModel","seconds","transclude","template","noFloat","isDefined","mdpNoFloat","placeholder","mdpPlaceholder","openOnClick","mdpOpenOnClick","LABEL_OK","LABEL_CANCEL","setOKButtonLabel","label","setCancelButtonLabel","$get","timePicker","Date","now","isObject","ok","show","clickOutsideToClose","locals","skipHide","provider","CalendarCtrl","self","dow","localeData","firstDayOfWeek","weekDays","concat","weekdaysMin","slice","daysInMonth","getDaysInMonth","days","date","firstDay","day","arr","enabled","isDayEnabled","minDate","maxDate","dateFilter","selectDate","dom","nextMonth","add","prevMonth","subtract","updateDaysInMonth","unix","DatePickerCtrl","currentDate","displayFormat","isFunction","selectingYear","isBefore","isAfter","yearItems","currentIndex_","PAGE_SIZE","START","year","END","getItemAtIndex","getLength","min","floor","abs","selectYear","animate","showYear","yearTopIndex","showCalendar","animating","noop","mdpCalendar","animElements","map","a","direction","addClass","mdpDatePicker","$mdpDatePicker","mdpDatePickerService","dateFormat","formatValidator","minDateValidator","maxDateValidator","filter","filterValidator","postLink","updateDate","model","isError","$invalid","month","post","service","factory","DISPLAY_FORMAT","setDisplayFormat","datePicker"],"mappings":"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","file":"mdPickers.min.js","sourcesContent":["(function() {\n\"use strict\";\n/* global moment, angular */\r\n(function() {\r\n    'use strict';\r\n\r\n    configIcons.$inject = [\"$mdIconProvider\", \"mdpIconsRegistry\"];\r\n    runBlock.$inject = [\"$templateCache\", \"mdpIconsRegistry\"];\r\n    angular\r\n        .module('mdPickers', [\r\n            'ngMaterial',\r\n            'ngAnimate',\r\n            'ngAria'\r\n        ])\r\n        .config(configIcons)\r\n        .run(runBlock);\r\n\r\n    /** @ngInject */\r\n    function configIcons($mdIconProvider, mdpIconsRegistry) {\r\n        angular.forEach(mdpIconsRegistry, function(icon, index) {\r\n            $mdIconProvider.icon(icon.id, icon.url);\r\n        });\r\n    }\r\n\r\n    /** @ngInject */\r\n    function runBlock($templateCache, mdpIconsRegistry) {\r\n        angular.forEach(mdpIconsRegistry, function(icon, index) {\r\n            $templateCache.put(icon.url, icon.svg);\r\n        });\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mdPickers')\r\n        .constant('mdpIconsRegistry', [{\r\n            id: 'mdp-chevron-left',\r\n            url: 'mdp-chevron-left.svg',\r\n            svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\r\n        }, {\r\n            id: 'mdp-chevron-right',\r\n            url: 'mdp-chevron-right.svg',\r\n            svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\r\n        }, {\r\n            id: 'mdp-access-time',\r\n            url: 'mdp-access-time.svg',\r\n            svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"/></svg>'\r\n        }, {\r\n            id: 'mdp-event',\r\n            url: 'mdp-event.svg',\r\n            svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\r\n        }]);\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    ngMessage.$inject = [\"$mdUtil\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .directive('ngMessage', ngMessage);\r\n\r\n    /** @ngInject */\r\n    function ngMessage($mdUtil) {\r\n        return {\r\n            restrict: 'EA',\r\n            priority: 101,\r\n            compile: function(element) {\r\n                var inputContainer = $mdUtil.getClosest(element, 'mdp-time-picker', true) ||\r\n                    $mdUtil.getClosest(element, 'mdp-date-picker', true);\r\n\r\n                // If we are not a child of an input container, don't do anything\r\n                if (!inputContainer) return;\r\n\r\n                // Add our animation class\r\n                element.toggleClass('md-input-message-animation', true);\r\n\r\n                return {};\r\n            }\r\n        }\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    ClockCtrl.$inject = [\"$scope\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .controller('ClockCtrl', ClockCtrl);\r\n\r\n    /** @ngInject */\r\n    function ClockCtrl($scope) {\r\n        var vm = this;\r\n\r\n        var TYPE_HOURS = \"hours\";\r\n        var TYPE_MINUTES = \"minutes\";\r\n\r\n        vm.STEP_DEG = 360 / 12;\r\n        vm.steps = [];\r\n        vm.CLOCK_TYPES = {\r\n            \"hours\": {\r\n                range: 12,\r\n            },\r\n            \"minutes\": {\r\n                range: 60,\r\n            }\r\n        };\r\n\r\n        vm.getPointerStyle = getPointerStyle;\r\n        vm.setTimeByDeg = setTimeByDeg;\r\n        vm.setTime = setTime;\r\n        vm.init = init;\r\n\r\n        vm.init();\r\n\r\n        function getPointerStyle() {\r\n            var divider = 1;\r\n            switch (vm.type) {\r\n                case TYPE_HOURS:\r\n                    divider = 12;\r\n                    break;\r\n                case TYPE_MINUTES:\r\n                    divider = 60;\r\n                    break;\r\n            }\r\n            var degrees = Math.round(vm.selected * (360 / divider)) - 180;\r\n            return {\r\n                \"-webkit-transform\": \"rotate(\" + degrees + \"deg)\",\r\n                \"-ms-transform\": \"rotate(\" + degrees + \"deg)\",\r\n                \"transform\": \"rotate(\" + degrees + \"deg)\"\r\n            }\r\n        }\r\n\r\n        function setTimeByDeg(deg) {\r\n            deg = deg >= 360 ? 0 : deg;\r\n            var divider = 0;\r\n            switch (vm.type) {\r\n                case TYPE_HOURS:\r\n                    divider = 12;\r\n                    break;\r\n                case TYPE_MINUTES:\r\n                    divider = 60;\r\n                    break;\r\n            }\r\n\r\n            vm.setTime(\r\n                Math.round(divider / 360 * deg)\r\n            );\r\n        }\r\n\r\n        function setTime(time, type) {\r\n            vm.selected = time;\r\n\r\n            switch (vm.type) {\r\n                case TYPE_HOURS:\r\n                    if (vm.time.format(\"A\") == \"PM\") time += 12;\r\n                    vm.time.hours(time);\r\n                    break;\r\n                case TYPE_MINUTES:\r\n                    if (time > 59) time -= 60;\r\n                    vm.time.minutes(time);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function init() {\r\n            vm.type = vm.type || \"hours\";\r\n            switch (vm.type) {\r\n                case TYPE_HOURS:\r\n                    for (var i = 1; i <= 12; i++)\r\n                        vm.steps.push(i);\r\n                    vm.selected = vm.time.hours() || 0;\r\n                    if (vm.selected > 12) vm.selected -= 12;\r\n\r\n                    break;\r\n                case TYPE_MINUTES:\r\n                    for (var i = 5; i <= 55; i += 5)\r\n                        vm.steps.push(i);\r\n                    vm.steps.push(0);\r\n                    vm.selected = vm.time.minutes() || 0;\r\n\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    TimePickerCtrl.$inject = [\"$scope\", \"$mdDialog\", \"time\", \"options\", \"$mdMedia\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .controller('TimePickerCtrl', TimePickerCtrl);\r\n\r\n    /** @ngInject */\r\n    function TimePickerCtrl($scope, $mdDialog, time, options, $mdMedia) {\r\n        var vm = this;\r\n\r\n        vm.VIEW_HOURS = 1;\r\n        vm.VIEW_MINUTES = 2;\r\n        vm.currentView = vm.VIEW_HOURS;\r\n        vm.time = moment(time);\r\n        vm.labels = options.labels;\r\n        vm.autoSwitch = !!options.autoSwitch;\r\n\r\n        vm.clockHours = parseInt(vm.time.format(\"h\"));\r\n        vm.clockMinutes = parseInt(vm.time.minutes());\r\n\r\n        vm.switchView = switchView;\r\n        vm.setAM = setAM;\r\n        vm.setPM = setPM;\r\n        vm.cancel = cancel;\r\n        vm.confirm = confirm;\r\n\r\n        $scope.$mdMedia = $mdMedia;\r\n\r\n        function switchView() {\r\n            vm.currentView = vm.currentView == vm.VIEW_HOURS ? vm.VIEW_MINUTES : vm.VIEW_HOURS;\r\n        }\r\n\r\n        function setAM() {\r\n            if (vm.time.hours() >= 12)\r\n                vm.time.hour(vm.time.hour() - 12);\r\n        }\r\n\r\n        function setPM() {\r\n            if (vm.time.hours() < 12)\r\n                vm.time.hour(vm.time.hour() + 12);\r\n        }\r\n\r\n        function cancel() {\r\n            $mdDialog.cancel();\r\n        }\r\n\r\n        function confirm() {\r\n            $mdDialog.hide(vm.time.toDate());\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    mdpClock.$inject = [\"$animate\", \"$timeout\", \"$$rAF\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .directive('mdpClock', mdpClock);\r\n\r\n    /** @ngInject */\r\n    function mdpClock($animate, $timeout, $$rAF) {\r\n        var directive = {\r\n            restrict: 'E',\r\n            bindToController: {\r\n                'type': '@?',\r\n                'time': '=',\r\n                'autoSwitch': '=?'\r\n            },\r\n            replace: true,\r\n            templateUrl: 'mdpTimePicker/templates/clock.html',\r\n            controller: 'ClockCtrl',\r\n            controllerAs: 'clock',\r\n            link: linkFn\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFn(scope, element, attrs, ctrl) {\r\n            var pointer = angular.element(element[0].querySelector('.mdp-pointer')),\r\n                timepickerCtrl = scope.$parent.timepicker;\r\n\r\n            var onEvent = function(event) {\r\n                var containerCoords = event.currentTarget.getClientRects()[0];\r\n                var x = ((event.currentTarget.offsetWidth / 2) - (event.pageX - containerCoords.left)),\r\n                    y = ((event.pageY - containerCoords.top) - (event.currentTarget.offsetHeight / 2));\r\n\r\n                var deg = Math.round((Math.atan2(x, y) * (180 / Math.PI)));\r\n                $$rAF(function() {\r\n                    $timeout(function() {\r\n                        ctrl.setTimeByDeg(deg + 180);\r\n                        if (ctrl.autoSwitch && ['mouseup', 'click'].indexOf(event.type) !== -1 && timepickerCtrl) timepickerCtrl.switchView();\r\n                    });\r\n                });\r\n            };\r\n\r\n            element.on('mousedown', function() {\r\n                element.on('mousemove', onEvent);\r\n            });\r\n\r\n            element.on('mouseup', function(e) {\r\n                element.off('mousemove', onEvent);\r\n            });\r\n\r\n            element.on('click', onEvent);\r\n            scope.$on('$destroy', function() {\r\n                element.off('click', onEvent);\r\n                element.off('mousemove', onEvent);\r\n            });\r\n        }\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    mdpTimePicker.$inject = [\"$mdpTimePicker\", \"$timeout\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .directive('mdpTimePicker', mdpTimePicker);\r\n\r\n    /** @ngInject */\r\n    function mdpTimePicker($mdpTimePicker, $timeout) {\r\n        var directive = {\r\n            restrict: 'A',\r\n            require: 'ngModel',\r\n            scope: {\r\n                'timeFormat': '@mdpFormat',\r\n                'autoSwitch': '=?mdpAutoSwitch',\r\n            },\r\n            link: linkFn\r\n        }\r\n\r\n        return directive;\r\n\r\n        function linkFn(scope, element, attrs, ngModel, $transclude) {\r\n            scope.format = scope.format || \"HH:mm\";\r\n\r\n            function showPicker(ev) {\r\n                $mdpTimePicker(ngModel.$modelValue, {\r\n                    targetEvent: ev,\r\n                    autoSwitch: scope.autoSwitch\r\n                }).then(function(time) {\r\n                    ngModel.$setViewValue(moment(time).format(scope.format));\r\n                    ngModel.$render();\r\n                });\r\n            };\r\n\r\n            element.on('click', showPicker);\r\n\r\n            scope.$on('$destroy', function() {\r\n                element.off('click', showPicker);\r\n            });\r\n        }\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    mdpTimePicker.$inject = [\"$mdpTimePicker\", \"$timeout\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .directive('mdpTimePicker', mdpTimePicker);\r\n\r\n    /** @ngInject */\r\n    function mdpTimePicker($mdpTimePicker, $timeout) {\r\n        var directive = {\r\n            restrict: 'E',\r\n            require: 'ngModel',\r\n            transclude: true,\r\n            template: function(element, attrs) {\r\n                var noFloat = angular.isDefined(attrs.mdpNoFloat),\r\n                    placeholder = angular.isDefined(attrs.mdpPlaceholder) ? attrs.mdpPlaceholder : \"\",\r\n                    openOnClick = angular.isDefined(attrs.mdpOpenOnClick) ? true : false;\r\n\r\n                return '<div layout layout-align=\"start start\">' +\r\n                            '<md-button class=\"md-icon-button\" ng-click=\"showPicker($event)\">' +\r\n                                '<md-icon md-svg-icon=\"mdp-access-time\"></md-icon>' +\r\n                            '</md-button>' +\r\n                            '<md-input-container flex' + (noFloat ? ' md-no-float' : '') + ' md-is-error=\"isError()\">' +\r\n                                '<input type=\"{{ ::type }}\" aria-label=\"' + placeholder + '\" placeholder=\"' + placeholder + '\"' + (openOnClick ? ' ng-click=\"showPicker($event)\" ' : '') + ' />' +\r\n                            '</md-input-container>' +\r\n                        '</div>';\r\n            },\r\n            scope: {\r\n                'timeFormat': '@mdpFormat',\r\n                'placeholder': '@mdpPlaceholder',\r\n                'autoSwitch': '=?mdpAutoSwitch',\r\n            },\r\n            link: linkFn\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFn(scope, element, attrs, ngModel, $transclude) {\r\n            var inputElement = angular.element(element[0].querySelector('input')),\r\n                inputContainer = angular.element(element[0].querySelector('md-input-container')),\r\n                inputContainerCtrl = inputContainer.controller('mdInputContainer');\r\n\r\n            $transclude(function(clone) {\r\n                inputContainer.append(clone);\r\n            });\r\n\r\n            var messages = angular.element(inputContainer[0].querySelector('[ng-messages]'));\r\n\r\n            scope.type = scope.timeFormat ? 'text' : 'time';\r\n            scope.timeFormat = scope.timeFormat || 'HH:mm';\r\n            scope.autoSwitch = scope.autoSwitch || false;\r\n\r\n            scope.$watch(function() {\r\n                return ngModel.$error;\r\n            }, function(newValue, oldValue) {\r\n                inputContainerCtrl.setInvalid(!ngModel.$pristine && !!Object.keys(ngModel.$error).length);\r\n            }, true);\r\n\r\n            // update input element if model has changed\r\n            ngModel.$formatters.unshift(function(value) {\r\n                var time = angular.isDate(value) && moment(value);\r\n                if (time && time.isValid())\r\n                    updateInputElement(time.format(scope.timeFormat));\r\n            });\r\n\r\n            ngModel.$validators.format = function(modelValue, viewValue) {\r\n                return !viewValue || angular.isDate(viewValue) || moment(viewValue, scope.timeFormat, true).isValid();\r\n            };\r\n\r\n            ngModel.$parsers.unshift(function(value) {\r\n                var parsed = moment(value, scope.timeFormat, true);\r\n                if (parsed.isValid()) {\r\n                    if (angular.isDate(ngModel.$modelValue)) {\r\n                        var originalModel = moment(ngModel.$modelValue);\r\n                        originalModel.minutes(parsed.minutes());\r\n                        originalModel.hours(parsed.hours());\r\n                        originalModel.seconds(parsed.seconds());\r\n\r\n                        parsed = originalModel;\r\n                    }\r\n                    return parsed.toDate();\r\n                } else\r\n                    return angular.isDate(ngModel.$modelValue) ? ngModel.$modelValue : null;\r\n            });\r\n\r\n            // update input element value\r\n            function updateInputElement(value) {\r\n                if (ngModel.$valid)\r\n                    inputElement[0].size = value.length + 1;\r\n                inputElement[0].value = value;\r\n                inputContainerCtrl.setHasValue(!ngModel.$isEmpty(value));\r\n            }\r\n\r\n            function updateTime(time) {\r\n                var value = moment(time, angular.isDate(time) ? null : scope.timeFormat, true),\r\n                    strValue = value.format(scope.timeFormat);\r\n\r\n                if (value.isValid()) {\r\n                    updateInputElement(strValue);\r\n                    ngModel.$setViewValue(strValue);\r\n                } else {\r\n                    updateInputElement(time);\r\n                    ngModel.$setViewValue(time);\r\n                }\r\n\r\n                if (!ngModel.$pristine &&\r\n                    messages.hasClass('md-auto-hide') &&\r\n                    inputContainer.hasClass('md-input-invalid')) messages.removeClass('md-auto-hide');\r\n\r\n                ngModel.$render();\r\n            }\r\n\r\n            scope.showPicker = function(ev) {\r\n                $mdpTimePicker(ngModel.$modelValue, {\r\n                    targetEvent: ev,\r\n                    autoSwitch: scope.autoSwitch\r\n                }).then(function(time) {\r\n                    updateTime(time, true);\r\n                });\r\n            };\r\n\r\n            function onInputElementEvents(event) {\r\n                if (event.target.value !== ngModel.$viewVaue)\r\n                    updateTime(event.target.value);\r\n            }\r\n\r\n            inputElement.on('reset input blur', onInputElementEvents);\r\n\r\n            scope.$on('$destroy', function() {\r\n                inputElement.off('reset input blur', onInputElementEvents);\r\n            });\r\n        }\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mdPickers')\r\n        .provider('$mdpTimePicker', $mdpTimePicker);\r\n\r\n    function $mdpTimePicker() {\r\n        var LABEL_OK = 'OK',\r\n            LABEL_CANCEL = 'Cancel';\r\n\r\n        this.setOKButtonLabel = function(label) {\r\n            LABEL_OK = label;\r\n        };\r\n\r\n        this.setCancelButtonLabel = function(label) {\r\n            LABEL_CANCEL = label;\r\n        };\r\n\r\n        /** @ngInject */\r\n        this.$get = [\"$mdDialog\", function($mdDialog) {\r\n            var timePicker = function(time, options) {\r\n                if (!angular.isDate(time)) time = Date.now();\r\n                if (!angular.isObject(options)) options = {};\r\n\r\n                options.labels = {\r\n                    cancel: LABEL_CANCEL,\r\n                    ok: LABEL_OK\r\n                };\r\n\r\n                return $mdDialog.show({\r\n                    controller: 'TimePickerCtrl',\r\n                    controllerAs: 'timepicker',\r\n                    clickOutsideToClose: true,\r\n                    templateUrl: 'mdpTimePicker/templates/mdp-time-picker.html',\r\n                    targetEvent: options.targetEvent,\r\n                    locals: {\r\n                        time: time,\r\n                        options: options\r\n                    },\r\n                    skipHide: true\r\n                });\r\n            };\r\n\r\n            return timePicker;\r\n        }];\r\n        this.$get.$inject = [\"$mdDialog\"];\r\n    }\r\n\r\n})();\r\n\n/* global moment, angular */\r\n(function () {\r\n    'use strict';\r\n\r\n    CalendarCtrl.$inject = [\"$scope\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .controller('CalendarCtrl', CalendarCtrl);\r\n\r\n    /** @ngInject */\r\n    function CalendarCtrl($scope) {\r\n        var self = this;\r\n        this.dow = moment.localeData().firstDayOfWeek();\r\n\r\n        this.weekDays = [].concat(\r\n            moment.weekdaysMin().slice(\r\n                this.dow\r\n            ),\r\n            moment.weekdaysMin().slice(\r\n                0,\r\n                this.dow\r\n            )\r\n        );\r\n\r\n        this.daysInMonth = [];\r\n\r\n        this.getDaysInMonth = function() {\r\n            var days = self.date.daysInMonth(),\r\n                firstDay = moment(self.date).date(1).day() - this.dow;\r\n\r\n            if (firstDay < 0) firstDay = this.weekDays.length - 1;\r\n\r\n\r\n            var arr = [];\r\n            for (var i = 1; i <= (firstDay + days); i++) {\r\n                var day = null;\r\n                if (i > firstDay) {\r\n                    day = {\r\n                        value: (i - firstDay),\r\n                        enabled: self.isDayEnabled(moment(self.date).date(i - firstDay).toDate())\r\n                    };\r\n                }\r\n                arr.push(day);\r\n            }\r\n\r\n            return arr;\r\n        };\r\n\r\n        this.isDayEnabled = function(day) {\r\n            return (!this.minDate || this.minDate <= day) &&\r\n                (!this.maxDate || this.maxDate >= day) &&\r\n                (!self.dateFilter || !self.dateFilter(day));\r\n        };\r\n\r\n        this.selectDate = function(dom) {\r\n            self.date.date(dom);\r\n        };\r\n\r\n        this.nextMonth = function() {\r\n            self.date.add(1, 'months');\r\n        };\r\n\r\n        this.prevMonth = function() {\r\n            self.date.subtract(1, 'months');\r\n        };\r\n\r\n        this.updateDaysInMonth = function() {\r\n            self.daysInMonth = self.getDaysInMonth();\r\n        };\r\n\r\n        $scope.$watch(function() {\r\n            return self.date.unix() }, function(newValue, oldValue) {\r\n            if (newValue && newValue !== oldValue)\r\n                self.updateDaysInMonth();\r\n        })\r\n\r\n        self.updateDaysInMonth();\r\n    }\r\n\r\n})();\r\n\n/* global moment, angular */\r\n(function() {\r\n    'use strict';\r\n\r\n    DatePickerCtrl.$inject = [\"$scope\", \"$mdDialog\", \"$mdMedia\", \"$timeout\", \"currentDate\", \"options\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .controller('DatePickerCtrl', DatePickerCtrl);\r\n\r\n    /** @ngInject */\r\n    function DatePickerCtrl($scope, $mdDialog, $mdMedia, $timeout, currentDate, options) {\r\n        var self = this;\r\n\r\n        this.date = moment(currentDate);\r\n        this.minDate = options.minDate && moment(options.minDate).isValid() ? moment(options.minDate) : null;\r\n        this.maxDate = options.maxDate && moment(options.maxDate).isValid() ? moment(options.maxDate) : null;\r\n        this.displayFormat = options.displayFormat || \"ddd, MMM DD\";\r\n        this.labels = options.labels;\r\n        this.dateFilter = angular.isFunction(options.dateFilter) ? options.dateFilter : null;\r\n        this.selectingYear = false;\r\n\r\n        // validate min and max date\r\n        if (this.minDate && this.maxDate) {\r\n            if (this.maxDate.isBefore(this.minDate)) {\r\n                this.maxDate = moment(this.minDate).add(1, 'days');\r\n            }\r\n        }\r\n\r\n        if (this.date) {\r\n            // check min date\r\n            if (this.minDate && this.date.isBefore(this.minDate)) {\r\n                this.date = moment(this.minDate);\r\n            }\r\n\r\n            // check max date\r\n            if (this.maxDate && this.date.isAfter(this.maxDate)) {\r\n                this.date = moment(this.maxDate);\r\n            }\r\n        }\r\n\r\n        this.yearItems = {\r\n            currentIndex_: 0,\r\n            PAGE_SIZE: 5,\r\n            START: (self.minDate ? self.minDate.year() : 1900),\r\n            END: (self.maxDate ? self.maxDate.year() : 0),\r\n            getItemAtIndex: function(index) {\r\n                if (this.currentIndex_ < index)\r\n                    this.currentIndex_ = index;\r\n\r\n                return this.START + index;\r\n            },\r\n            getLength: function() {\r\n                return Math.min(\r\n                    this.currentIndex_ + Math.floor(this.PAGE_SIZE / 2),\r\n                    Math.abs(this.START - this.END) + 1\r\n                );\r\n            }\r\n        };\r\n\r\n        $scope.$mdMedia = $mdMedia;\r\n        $scope.year = this.date.year();\r\n\r\n        this.selectYear = function(year) {\r\n            self.date.year(year);\r\n            $scope.year = year;\r\n            self.selectingYear = false;\r\n            self.animate();\r\n        };\r\n\r\n        this.showYear = function() {\r\n            self.yearTopIndex = (self.date.year() - self.yearItems.START) + Math.floor(self.yearItems.PAGE_SIZE / 2);\r\n            self.yearItems.currentIndex_ = (self.date.year() - self.yearItems.START) + 1;\r\n            self.selectingYear = true;\r\n        };\r\n\r\n        this.showCalendar = function() {\r\n            self.selectingYear = false;\r\n        };\r\n\r\n        this.cancel = function() {\r\n            $mdDialog.cancel();\r\n        };\r\n\r\n        this.confirm = function() {\r\n            var date = this.date;\r\n\r\n            if (this.minDate && this.date.isBefore(this.minDate)) {\r\n                date = moment(this.minDate);\r\n            }\r\n\r\n            if (this.maxDate && this.date.isAfter(this.maxDate)) {\r\n                date = moment(this.maxDate);\r\n            }\r\n\r\n            $mdDialog.hide(date.toDate());\r\n        };\r\n\r\n        this.animate = function() {\r\n            self.animating = true;\r\n            $timeout(angular.noop).then(function() {\r\n                self.animating = false;\r\n            })\r\n        };\r\n    }\r\n\r\n})();\r\n\n/* global moment, angular */\r\n\r\n(function() {\r\n    'use strict';\r\n\r\n    mdpCalendar.$inject = [\"$animate\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .directive('mdpCalendar', mdpCalendar);\r\n\r\n    /** @ngInject */\r\n    function mdpCalendar($animate) {\r\n        var directive = {\r\n            restrict: 'E',\r\n            bindToController: {\r\n                'date': '=',\r\n                'minDate': '=',\r\n                'maxDate': '=',\r\n                'dateFilter': '='\r\n            },\r\n            templateUrl: 'mdpDatePicker/templates/mdp-date-picker-calendar.html',\r\n            controller: 'CalendarCtrl',\r\n            controllerAs: 'calendar',\r\n            link: linkFn\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFn(scope, element, attrs, ctrl) {\r\n            var animElements = [\r\n                element[0].querySelector('.mdp-calendar-week-days'),\r\n                element[0].querySelector('.mdp-calendar-days'),\r\n                element[0].querySelector('.mdp-calendar-monthyear')\r\n            ].map(function(a) {\r\n                return angular.element(a);\r\n            });\r\n\r\n            scope.$watch(function() {\r\n                return ctrl.date.format('YYYYMM')\r\n            }, function(newValue, oldValue) {\r\n                var direction = null;\r\n\r\n                if (newValue > oldValue)\r\n                    direction = \"mdp-animate-next\";\r\n                else if (newValue < oldValue)\r\n                    direction = \"mdp-animate-prev\";\r\n\r\n                if (direction) {\r\n                    for (var i in animElements) {\r\n                        animElements[i].addClass(direction);\r\n                        $animate.removeClass(animElements[i], direction);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    mdpDatePicker.$inject = [\"$mdpDatePicker\", \"$timeout\", \"mdpDatePickerService\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .directive(\"mdpDatePicker\", mdpDatePicker);\r\n\r\n    /** @ngInject */\r\n    function mdpDatePicker($mdpDatePicker, $timeout, mdpDatePickerService) {\r\n        var directive = {\r\n            restrict: 'A',\r\n            require: 'ngModel',\r\n            scope: {\r\n                \"minDate\": \"@min\",\r\n                \"maxDate\": \"@max\",\r\n                \"dateFilter\": \"=mdpDateFilter\",\r\n                \"dateFormat\": \"@mdpFormat\",\r\n            },\r\n            link: linkFn\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFn(scope, element, attrs, ngModel, $transclude) {\r\n            scope.dateFormat = scope.dateFormat || \"YYYY-MM-DD\";\r\n\r\n            ngModel.$validators.format = function(modelValue, viewValue) {\r\n                return mdpDatePickerService.formatValidator(viewValue, scope.format);\r\n            };\r\n\r\n            ngModel.$validators.minDate = function(modelValue, viewValue) {\r\n                return mdpDatePickerService.minDateValidator(viewValue, scope.format, scope.minDate);\r\n            };\r\n\r\n            ngModel.$validators.maxDate = function(modelValue, viewValue) {\r\n                return mdpDatePickerService.maxDateValidator(viewValue, scope.format, scope.maxDate);\r\n            };\r\n\r\n            ngModel.$validators.filter = function(modelValue, viewValue) {\r\n                return mdpDatePickerService.filterValidator(viewValue, scope.format, scope.dateFilter);\r\n            };\r\n\r\n            function showPicker(ev) {\r\n                $mdpDatePicker(ngModel.$modelValue, {\r\n                    minDate: scope.minDate,\r\n                    maxDate: scope.maxDate,\r\n                    dateFilter: scope.dateFilter,\r\n                    targetEvent: ev\r\n                }).then(function(time) {\r\n                    ngModel.$setViewValue(moment(time).format(scope.format));\r\n                    ngModel.$render();\r\n                });\r\n            }\r\n\r\n            element.on('click', showPicker);\r\n\r\n            scope.$on('$destroy', function() {\r\n                element.off('click', showPicker);\r\n            });\r\n        }\r\n    }\r\n\r\n})();\n(function() {\r\n    'use strict';\r\n\r\n    mdpDatePicker.$inject = [\"$mdpDatePicker\", \"$timeout\", \"mdpDatePickerService\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .directive('mdpDatePicker', mdpDatePicker);\r\n\r\n    /** @ngInject */\r\n    function mdpDatePicker($mdpDatePicker, $timeout, mdpDatePickerService) {\r\n\r\n        var directive = {\r\n            restrict: 'E',\r\n            require: 'ngModel',\r\n            transclude: true,\r\n            template: function(element, attrs) {\r\n                var noFloat = angular.isDefined(attrs.mdpNoFloat),\r\n                    placeholder = angular.isDefined(attrs.mdpPlaceholder) ? attrs.mdpPlaceholder : \"\",\r\n                    openOnClick = angular.isDefined(attrs.mdpOpenOnClick) ? true : false;\r\n\r\n                return '<div layout layout-align=\"start start\">' +\r\n                            '<md-button class=\"md-icon-button\" ng-click=\"showPicker($event)\">' +\r\n                                '<md-icon md-svg-icon=\"mdp-event\"></md-icon>' +\r\n                            '</md-button>' +\r\n                            '<md-input-container' + (noFloat ? ' md-no-float' : '') + ' md-is-error=\"isError()\" flex>' +\r\n                                '<input type=\"{{ type }}\" aria-label=\"' + placeholder + '\" placeholder=\"' + placeholder + '\"' + (openOnClick ? ' ng-click=\"showPicker($event)\" ' : '') + ' />' +\r\n                            '</md-input-container>' +\r\n                        '</div>';\r\n            },\r\n            scope: {\r\n                'minDate': '=mdpMinDate',\r\n                'maxDate': '=mdpMaxDate',\r\n                'dateFilter': '=mdpDateFilter',\r\n                'dateFormat': '@mdpFormat',\r\n                'placeholder': '@mdpPlaceholder',\r\n                'noFloat': '=mdpNoFloat',\r\n                'openOnClick': '=mdpOpenOnClick'\r\n            },\r\n            link: {\r\n                post: postLink\r\n            }\r\n        };\r\n\r\n        return directive;\r\n\r\n        function postLink(scope, element, attrs, ngModel, $transclude) {\r\n            var inputElement = angular.element(element[0].querySelector('input')),\r\n                inputContainer = angular.element(element[0].querySelector('md-input-container')),\r\n                inputContainerCtrl = inputContainer.controller('mdInputContainer');\r\n\r\n            $transclude(function(clone) {\r\n                inputContainer.append(clone);\r\n            });\r\n\r\n            var messages = angular.element(inputContainer[0].querySelector('[ng-messages]'));\r\n\r\n            scope.type = scope.dateFormat ? 'text' : 'date';\r\n            scope.dateFormat = scope.dateFormat || 'YYYY-MM-DD';\r\n            scope.model = ngModel;\r\n\r\n            scope.isError = function() {\r\n                return !ngModel.$pristine && !!ngModel.$invalid;\r\n            };\r\n\r\n            // update input element if model has changed\r\n            ngModel.$formatters.unshift(function(value) {\r\n                var date = angular.isDate(value) && moment(value);\r\n                if (date && date.isValid())\r\n                    updateInputElement(date.format(scope.dateFormat));\r\n            });\r\n\r\n            ngModel.$validators.format = function(modelValue, viewValue) {\r\n                return mdpDatePickerService.formatValidator(viewValue, scope.dateFormat);\r\n            };\r\n\r\n            ngModel.$validators.minDate = function(modelValue, viewValue) {\r\n                return mdpDatePickerService.minDateValidator(viewValue, scope.dateFormat, scope.minDate);\r\n            };\r\n\r\n            ngModel.$validators.maxDate = function(modelValue, viewValue) {\r\n                return mdpDatePickerService.maxDateValidator(viewValue, scope.dateFormat, scope.maxDate);\r\n            };\r\n\r\n            ngModel.$validators.filter = function(modelValue, viewValue) {\r\n                return mdpDatePickerService.filterValidator(viewValue, scope.dateFormat, scope.dateFilter);\r\n            };\r\n\r\n            ngModel.$parsers.unshift(function(value) {\r\n                var parsed = moment(value, scope.dateFormat, true);\r\n                if (parsed.isValid()) {\r\n                    if (angular.isDate(ngModel.$modelValue)) {\r\n                        var originalModel = moment(ngModel.$modelValue);\r\n                        originalModel.year(parsed.year());\r\n                        originalModel.month(parsed.month());\r\n                        originalModel.date(parsed.date());\r\n\r\n                        parsed = originalModel;\r\n                    }\r\n                    return parsed.toDate();\r\n                } else\r\n                    return angular.isDate(ngModel.$modelValue) ? ngModel.$modelValue : null;\r\n            });\r\n\r\n            // update input element value\r\n            function updateInputElement(value) {\r\n                if (ngModel.$valid)\r\n                    inputElement[0].size = value.length + 1;\r\n                inputElement[0].value = value;\r\n                inputContainerCtrl.setHasValue(!ngModel.$isEmpty(value));\r\n            }\r\n\r\n            function updateDate(date) {\r\n                var value = moment(date, angular.isDate(date) ? null : scope.dateFormat, true),\r\n                    strValue = value.format(scope.dateFormat);\r\n\r\n                if (value.isValid()) {\r\n                    updateInputElement(strValue);\r\n                    ngModel.$setViewValue(strValue);\r\n                } else {\r\n                    updateInputElement(date);\r\n                    ngModel.$setViewValue(date);\r\n                }\r\n\r\n                if (!ngModel.$pristine &&\r\n                    messages.hasClass('md-auto-hide') &&\r\n                    inputContainer.hasClass('md-input-invalid')) messages.removeClass('md-auto-hide');\r\n\r\n                ngModel.$render();\r\n            }\r\n\r\n            scope.showPicker = function(ev) {\r\n                $mdpDatePicker(ngModel.$modelValue, {\r\n                    minDate: scope.minDate,\r\n                    maxDate: scope.maxDate,\r\n                    dateFilter: scope.dateFilter,\r\n                    targetEvent: ev\r\n                }).then(updateDate);\r\n            };\r\n\r\n            function onInputElementEvents(event) {\r\n                if (event.target.value !== ngModel.$viewVaue)\r\n                    updateDate(event.target.value);\r\n            }\r\n\r\n            inputElement.on('reset input blur', onInputElementEvents);\r\n\r\n            scope.$on('$destroy', function() {\r\n                inputElement.off('reset input blur', onInputElementEvents);\r\n            });\r\n        }\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mdPickers')\r\n        .factory('mdpDatePickerService', mdpDatePickerService);\r\n\r\n    /** @ngInject */\r\n    function mdpDatePickerService() {\r\n\r\n        var service = {\r\n            formatValidator: formatValidator,\r\n            minDateValidator: minDateValidator,\r\n            maxDateValidator: maxDateValidator,\r\n            filterValidator: filterValidator\r\n        };\r\n\r\n        return service;\r\n\r\n        function formatValidator(value, format) {\r\n            return !value || angular.isDate(value) || moment(value, format, true).isValid();\r\n        }\r\n\r\n        function minDateValidator(value, format, minDate) {\r\n            minDate = moment(minDate, \"YYYY-MM-DD\", true);\r\n            var date = angular.isDate(value) ? moment(value) : moment(value, format, true);\r\n\r\n            return !value ||\r\n                angular.isDate(value) ||\r\n                !minDate.isValid() ||\r\n                date.isAfter(minDate);\r\n        }\r\n\r\n        function maxDateValidator(value, format, maxDate) {\r\n            maxDate = moment(maxDate, \"YYYY-MM-DD\", true);\r\n            var date = angular.isDate(value) ? moment(value) : moment(value, format, true);\r\n\r\n            return !value ||\r\n                angular.isDate(value) ||\r\n                !maxDate.isValid() ||\r\n                date.isBefore(maxDate);\r\n        }\r\n\r\n        function filterValidator(value, format, filter) {\r\n            var date = angular.isDate(value) ? moment(value) : moment(value, format, true);\r\n\r\n            return !value ||\r\n                angular.isDate(value) ||\r\n                !angular.isFunction(filter) ||\r\n                !filter(date);\r\n        }\r\n\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mdPickers')\r\n        .provider(\"$mdpDatePicker\", $mdpDatePicker);\r\n\r\n    /** @ngInject */\r\n    function $mdpDatePicker() {\r\n        var LABEL_OK = 'OK',\r\n            LABEL_CANCEL = 'Cancel',\r\n            DISPLAY_FORMAT = 'ddd, MMM DD';\r\n\r\n        this.setDisplayFormat = function(format) {\r\n            DISPLAY_FORMAT = format;\r\n        };\r\n\r\n        this.setOKButtonLabel = function(label) {\r\n            LABEL_OK = label;\r\n        };\r\n\r\n        this.setCancelButtonLabel = function(label) {\r\n            LABEL_CANCEL = label;\r\n        };\r\n\r\n        /** @ngInject */\r\n        this.$get = [\"$mdDialog\", function($mdDialog) {\r\n            var datePicker = function(currentDate, options) {\r\n                if (!angular.isDate(currentDate)) currentDate = Date.now();\r\n                if (!angular.isObject(options)) options = {};\r\n\r\n                options.displayFormat = DISPLAY_FORMAT;\r\n                options.labels = {\r\n                    cancel: LABEL_CANCEL,\r\n                    ok: LABEL_OK\r\n                };\r\n\r\n                return $mdDialog.show({\r\n                    controller: 'DatePickerCtrl',\r\n                    controllerAs: 'datepicker',\r\n                    clickOutsideToClose: true,\r\n                    templateUrl: 'mdpDatePicker/templates/mdp-date-picker.html',\r\n                    targetEvent: options.targetEvent,\r\n                    locals: {\r\n                        currentDate: currentDate,\r\n                        options: options\r\n                    },\r\n                    skipHide: true\r\n                });\r\n            };\r\n\r\n            return datePicker;\r\n        }];\r\n        this.$get.$inject = [\"$mdDialog\"];\r\n    }\r\n\r\n})();\r\n\n!function(e){try{e=angular.module(\"mdPickers\")}catch(a){e=angular.module(\"mdPickers\",[])}e.run([\"$templateCache\",function(e){e.put(\"mdpDatePicker/templates/mdp-date-picker-calendar.html\",'<div class=\"mdp-calendar\"><div layout=\"row\" layout-align=\"space-between center\"><md-button aria-label=\"previous month\" class=\"md-icon-button\" ng-click=\"calendar.prevMonth()\"><md-icon md-svg-icon=\"mdp-chevron-left\"></md-icon></md-button><div class=\"mdp-calendar-monthyear\" ng-show=\"!calendar.animating\">{{ calendar.date.format(\"MMMM YYYY\") }}</div><md-button aria-label=\"next month\" class=\"md-icon-button\" ng-click=\"calendar.nextMonth()\"><md-icon md-svg-icon=\"mdp-chevron-right\"></md-icon></md-button></div><div layout=\"row\" layout-align=\"space-around center\" class=\"mdp-calendar-week-days\" ng-show=\"!calendar.animating\"><div layout=\"\" layout-align=\"center center\" ng-repeat=\"d in ::calendar.weekDays track by $index\">{{ ::d }}</div></div><div layout=\"row\" layout-align=\"start center\" layout-wrap=\"\" class=\"mdp-calendar-days\" ng-class=\"{ \\'mdp-animate-next\\': calendar.animating }\" ng-show=\"!calendar.animating\" md-swipe-left=\"calendar.nextMonth()\" md-swipe-right=\"calendar.prevMonth()\"><div layout=\"\" layout-align=\"center center\" ng-repeat-start=\"day in calendar.daysInMonth track by $index\" ng-class=\"{ \\'mdp-day-placeholder\\': !day }\"><md-button class=\"md-icon-button md-raised\" aria-label=\"Select day\" ng-if=\"day\" ng-class=\"{ \\'md-accent\\': calendar.date.date() == day.value }\" ng-click=\"calendar.selectDate(day.value)\" ng-disabled=\"!day.enabled\">{{ ::day.value }}</md-button></div><div flex=\"100\" ng-if=\"($index + 1) % 7 == 0\" ng-repeat-end=\"\"></div></div></div>')}])}(),function(e){try{e=angular.module(\"mdPickers\")}catch(a){e=angular.module(\"mdPickers\",[])}e.run([\"$templateCache\",function(e){e.put(\"mdpDatePicker/templates/mdp-date-picker.html\",'<md-dialog class=\"mdp-datepicker\" ng-class=\"{portrait: !$mdMedia(\\'gt-xs\\')}\"><md-dialog-content layout=\"row\" layout-wrap=\"\"><div layout=\"column\" layout-align=\"start center\"><md-toolbar layout-align=\"start start\" flex=\"noshrink\" class=\"mdp-datepicker-date-wrapper md-hue-1 md-primary\" layout=\"column\"><span class=\"mdp-datepicker-year\" ng-click=\"datepicker.showYear()\" ng-class=\"{active: datepicker.selectingYear}\">{{ datepicker.date.format(\\'YYYY\\') }}</span> <span class=\"mdp-datepicker-date\" ng-click=\"datepicker.showCalendar()\" ng-class=\"{active: !datepicker.selectingYear}\">{{ datepicker.date.format(datepicker.displayFormat) }}</span></md-toolbar></div><div><div class=\"mdp-datepicker-select-year mdp-animation-zoom\" layout=\"column\" layout-align=\"center start\" ng-if=\"datepicker.selectingYear\"><md-virtual-repeat-container md-auto-shrink=\"\" md-top-index=\"datepicker.yearTopIndex\"><div flex=\"\" md-virtual-repeat=\"item in ::datepicker.yearItems\" md-on-demand=\"\" class=\"repeated-year\"><span class=\"md-button\" ng-click=\"datepicker.selectYear(item)\" md-ink-ripple=\"\" ng-class=\"{ \\'md-primary current\\': item == year }\">{{ item }}</span></div></md-virtual-repeat-container></div><mdp-calendar ng-if=\"!datepicker.selectingYear\" class=\"mdp-animation-zoom\" date=\"datepicker.date\" min-date=\"datepicker.minDate\" date-filter=\"datepicker.dateFilter\" max-date=\"datepicker.maxDate\"></mdp-calendar><md-dialog-actions layout=\"row\"><span flex=\"\"></span><md-button ng-click=\"datepicker.cancel()\" aria-label=\"{{::datepicker.labels.cancel}}\">{{::datepicker.labels.cancel}}</md-button><md-button ng-click=\"datepicker.confirm()\" class=\"md-primary\" aria-label=\"{{::datepicker.labels.ok}}\">{{::datepicker.labels.ok}}</md-button></md-dialog-actions></div></md-dialog-content></md-dialog>')}])}(),function(e){try{e=angular.module(\"mdPickers\")}catch(a){e=angular.module(\"mdPickers\",[])}e.run([\"$templateCache\",function(e){e.put(\"mdpTimePicker/templates/clock.html\",'<div class=\"mdp-clock\"><div class=\"mdp-clock-container\"><md-toolbar class=\"mdp-clock-center md-primary\"></md-toolbar><md-toolbar ng-style=\"clock.getPointerStyle()\" class=\"mdp-pointer md-primary\"><span class=\"mdp-clock-selected md-button md-raised md-primary\"></span></md-toolbar><md-button ng-class=\"{\\'md-primary\\': clock.selected == step}\" class=\"md-icon-button md-raised mdp-clock-deg{{ ::(clock.STEP_DEG * ($index + 1)) }}\" ng-repeat=\"step in clock.steps\" ng-click=\"clock.setTime(step)\">{{ step }}</md-button></div></div>')}])}(),function(e){try{e=angular.module(\"mdPickers\")}catch(a){e=angular.module(\"mdPickers\",[])}e.run([\"$templateCache\",function(e){e.put(\"mdpTimePicker/templates/mdp-time-picker.html\",'<md-dialog class=\"mdp-timepicker\" ng-class=\"{portrait: !$mdMedia(\\'gt-xs\\')}\"><md-dialog-content layout=\"column\" layout-gt-xs=\"row\"><md-toolbar layout-gt-xs=\"column\" layout-xs=\"row\" layout-align=\"center center\" flex=\"noshrink\" class=\"mdp-timepicker-time md-hue-1 md-primary\"><div class=\"mdp-timepicker-selected-time\"><span ng-class=\"{ \\'active\\': timepicker.currentView == timepicker.VIEW_HOURS }\" ng-click=\"timepicker.currentView = timepicker.VIEW_HOURS\">{{ timepicker.time.format(\"h\") }}</span>:<span ng-class=\"{ \\'active\\': timepicker.currentView == timepicker.VIEW_MINUTES }\" ng-click=\"timepicker.currentView = timepicker.VIEW_MINUTES\">{{ timepicker.time.format(\"mm\") }}</span></div><div layout=\"column\" class=\"mdp-timepicker-selected-ampm\"><span ng-click=\"timepicker.setAM()\" ng-class=\"{ \\'active\\': timepicker.time.hours() < 12 }\">AM</span> <span ng-click=\"timepicker.setPM()\" ng-class=\"{ \\'active\\': timepicker.time.hours() >= 12 }\">PM</span></div></md-toolbar><div flex=\"noshrink\"><div class=\"mdp-clock-switch-container\" ng-switch=\"timepicker.currentView\" layout=\"\" layout-align=\"center center\"><mdp-clock class=\"mdp-animation-zoom\" auto-switch=\"timepicker.autoSwitch\" time=\"timepicker.time\" type=\"hours\" ng-switch-when=\"1\"></mdp-clock><mdp-clock class=\"mdp-animation-zoom\" auto-switch=\"timepicker.autoSwitch\" time=\"timepicker.time\" type=\"minutes\" ng-switch-when=\"2\"></mdp-clock></div><md-dialog-actions layout=\"row\"><span flex=\"\"></span><md-button ng-click=\"timepicker.cancel()\" aria-label=\"{{::timepicker.labels.cancel}}\">{{::timepicker.labels.cancel}}</md-button><md-button ng-click=\"timepicker.confirm()\" class=\"md-primary\" aria-label=\"{{::timepicker.labels.ok}}\">{{::timepicker.labels.ok}}</md-button></md-dialog-actions></div></md-dialog-content></md-dialog>')}])}();\n})();"],"sourceRoot":"/source/"}